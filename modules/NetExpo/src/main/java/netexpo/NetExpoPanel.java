/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package netexpo;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.HashSet;
import java.util.Set;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import org.gephi.graph.api.Column;
import org.gephi.graph.api.Edge;
import org.gephi.graph.api.Graph;
import org.gephi.graph.api.Node;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

/**
 *
 * @author mac
 */
public class NetExpoPanel extends javax.swing.JPanel {

    private Column[] attributes;
    private Column [] edge_attributes;
    private Graph graph;
    
    private String twoModeValue;
    private String twoModeColumn;
    
    private String netExpoInputColumn;

    public void setAttributes(Column[] attributes) {
        this.attributes = attributes;

        
    }
    
    public void setEdgeAttributes(Column [] edges){
        this.edge_attributes = edges;
    }
    
    public String getTwoModeValue(){
        if(affExposureCheckBox.isSelected()){
            return twoModeValue;
        }
        else{
            return null;
        }
        
    }
    
    public String getTwoModeColumn(){
        if(affExposureCheckBox.isSelected()){
            return twoModeColumn;
        }
        else{
            return null;
        }
    }
    
    public String getCMatrixColumn(){
        if(this.cbDecomposedExposure.isSelected()){
            return this.c1c2_columns.getSelectedItem().toString();
        }
        else{
            return null;
        }
    }
    
    public String getC1Attribute(){
        if(this.cbDecomposedExposure.isSelected()){
            return this.c1Attribute_1.getSelectedItem().toString();
        }
        else{
            return null;
        }
    }
    
    public String getC2Attribute(){
        if(this.cbDecomposedExposure.isSelected()){
            return this.c2Attribute_1.getSelectedItem().toString();
        }
        else{
            return null;
        }
    }
    
    public String getSelectedNetworkExposureAttribute(){
        
        if(netexpoAttributeComboBox.getSelectedItem() != null){
            return netexpoAttributeComboBox.getSelectedItem().toString();
        }
        
        return null;
    }
    
    public String getSelectedAffiliationExposureAttribute() {
        if(affnetAttributeComboBox.getSelectedItem() !=null){
            return affnetAttributeComboBox.getSelectedItem().toString();
        }
        return null;
    }
    
    public String getSelectedDecompositionExposureAttribute(){
        if(this.deAttributeComboBox.getSelectedItem() != null){
            return deAttributeComboBox.getSelectedItem().toString();
        }
        return null;
    }

    //private Vector<String> attributeList = new Vector<String>();

    /**
     * Creates new form NetExpoPanel
     */
    public NetExpoPanel() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleBar = new JLabel();
        jSeparator1 = new JSeparator();
        jLabel8 = new JLabel();
        jTabbedPane1 = new JTabbedPane();
        jPanel1 = new JPanel();
        networkExposureLabel = new JLabel();
        jLabel1 = new JLabel();
        networkExposureCheckBox = new JCheckBox();
        jLabel2 = new JLabel();
        netexpoAttributeComboBox = new JComboBox<>();
        jLabel9 = new JLabel();
        netExpoColumnInput = new JTextField();
        jPanel2 = new JPanel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        affExposureCheckBox = new JCheckBox();
        jLabel7 = new JLabel();
        affnetAttributeComboBox = new JComboBox<>();
        jLabel5 = new JLabel();
        twoModeComboBox = new JComboBox<>();
        jLabel6 = new JLabel();
        primaryValueComboBox = new JComboBox<>();
        jLabel10 = new JLabel();
        affexpColumnInput = new JTextField();
        provideOffDiagonalValues = new JCheckBox();
        jPanel3 = new JPanel();
        jLabel11 = new JLabel();
        jLabel12 = new JLabel();
        c1c2_columns = new JComboBox<>();
        jLabel13 = new JLabel();
        cbDecomposedExposure = new JCheckBox();
        jLabel14 = new JLabel();
        c1Attribute_1 = new JComboBox<>();
        jLabel15 = new JLabel();
        c2Attribute_1 = new JComboBox<>();
        jLabel16 = new JLabel();
        deAttributeComboBox = new JComboBox<>();
        jLabel17 = new JLabel();
        de_column_exposure_name = new JTextField();

        titleBar.setBackground(new Color(255, 255, 255));
        titleBar.setFont(new Font("Helvetica Neue", 1, 24)); // NOI18N
        Mnemonics.setLocalizedText(titleBar, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.titleBar.text_1")); // NOI18N
        titleBar.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel8.setHorizontalAlignment(SwingConstants.RIGHT);
        jLabel8.setIcon(new ImageIcon(getClass().getResource("/snap-logo-v2.png"))); // NOI18N
        Mnemonics.setLocalizedText(jLabel8, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel8.text_1")); // NOI18N

        jTabbedPane1.setFont(new Font("Helvetica Neue", 0, 13)); // NOI18N

        networkExposureLabel.setFont(new Font("Helvetica Neue", 1, 14)); // NOI18N
        Mnemonics.setLocalizedText(networkExposureLabel, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.networkExposureLabel.text_1")); // NOI18N

        Mnemonics.setLocalizedText(jLabel1, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.networkExposureDescription.text_1")); // NOI18N
        jLabel1.setName("networkExposureDescription"); // NOI18N

        Mnemonics.setLocalizedText(networkExposureCheckBox, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.networkExposureCheckBox.text")); // NOI18N
        networkExposureCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                networkExposureCheckBoxActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(jLabel2, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel2.text_1")); // NOI18N

        netexpoAttributeComboBox.setEnabled(false);
        netexpoAttributeComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                netexpoAttributeComboBoxItemStateChanged(evt);
            }
        });

        jLabel9.setFont(new Font("Helvetica Neue", 2, 13)); // NOI18N
        jLabel9.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(jLabel9, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel9.text")); // NOI18N

        netExpoColumnInput.setText(NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.netExpoColumnInput.text")); // NOI18N
        netExpoColumnInput.setEnabled(false);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(networkExposureLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(netexpoAttributeComboBox, GroupLayout.PREFERRED_SIZE, 285, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netExpoColumnInput))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(networkExposureCheckBox)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel2)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(networkExposureLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(networkExposureCheckBox)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(netExpoColumnInput, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                    .addComponent(netexpoAttributeComboBox, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(198, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jLabel3.setFont(new Font("Helvetica Neue", 1, 14)); // NOI18N
        Mnemonics.setLocalizedText(jLabel3, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel3.text_1")); // NOI18N

        Mnemonics.setLocalizedText(jLabel4, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel4.text_1")); // NOI18N

        Mnemonics.setLocalizedText(affExposureCheckBox, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.affExposureCheckBox.text")); // NOI18N
        affExposureCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                onCheckAffExpo(evt);
            }
        });

        Mnemonics.setLocalizedText(jLabel7, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel7.text_1")); // NOI18N

        affnetAttributeComboBox.setEnabled(false);
        affnetAttributeComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                affnetAttributeComboBoxItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new Font("Lucida Grande", 2, 13)); // NOI18N
        Mnemonics.setLocalizedText(jLabel5, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel5.text_1")); // NOI18N

        twoModeComboBox.setEnabled(false);
        twoModeComboBox.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                twoModeComboBoxItemStateChanged(evt);
            }
        });
        twoModeComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                twoModeComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setFont(new Font("Lucida Grande", 2, 13)); // NOI18N
        Mnemonics.setLocalizedText(jLabel6, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel6.text_1")); // NOI18N

        primaryValueComboBox.setEnabled(false);
        primaryValueComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                primaryValueComboBoxActionPerformed(evt);
            }
        });

        jLabel10.setFont(new Font("Helvetica Neue", 2, 13)); // NOI18N
        jLabel10.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(jLabel10, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel10.text")); // NOI18N

        affexpColumnInput.setText(NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.affexpColumnInput.text")); // NOI18N
        affexpColumnInput.setEnabled(false);

        Mnemonics.setLocalizedText(provideOffDiagonalValues, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.provideOffDiagonalValues.text")); // NOI18N

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(twoModeComboBox, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(primaryValueComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(446, 446, 446)
                        .addComponent(affexpColumnInput))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(affExposureCheckBox)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(affnetAttributeComboBox, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addComponent(provideOffDiagonalValues))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(affExposureCheckBox)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(affexpColumnInput, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                    .addComponent(affnetAttributeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(twoModeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(primaryValueComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(provideOffDiagonalValues)
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

        jLabel11.setFont(new Font("Helvetica Neue", 1, 14)); // NOI18N
        Mnemonics.setLocalizedText(jLabel11, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel11.text")); // NOI18N

        Mnemonics.setLocalizedText(jLabel12, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel12.text")); // NOI18N

        c1c2_columns.setEnabled(false);
        c1c2_columns.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                c1c2_columnsActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(jLabel13, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel13.text")); // NOI18N

        Mnemonics.setLocalizedText(cbDecomposedExposure, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.cbDecomposedExposure.text")); // NOI18N
        cbDecomposedExposure.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cbDecomposedExposureActionPerformed(evt);
            }
        });

        Mnemonics.setLocalizedText(jLabel14, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel14.text")); // NOI18N

        c1Attribute_1.setEnabled(false);
        c1Attribute_1.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                c1Attribute_1ItemStateChanged(evt);
            }
        });

        Mnemonics.setLocalizedText(jLabel15, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel15.text")); // NOI18N

        c2Attribute_1.setEnabled(false);
        c2Attribute_1.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                c2Attribute_1ItemStateChanged(evt);
            }
        });

        Mnemonics.setLocalizedText(jLabel16, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel16.text")); // NOI18N

        deAttributeComboBox.setEnabled(false);
        deAttributeComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deAttributeComboBoxActionPerformed(evt);
            }
        });

        jLabel17.setFont(new Font("Helvetica Neue", 2, 13)); // NOI18N
        jLabel17.setHorizontalAlignment(SwingConstants.RIGHT);
        Mnemonics.setLocalizedText(jLabel17, NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jLabel17.text")); // NOI18N

        de_column_exposure_name.setText(NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.de_column_exposure_name.text")); // NOI18N
        de_column_exposure_name.setEnabled(false);

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(cbDecomposedExposure)
                            .addComponent(jLabel14)
                            .addComponent(c1Attribute_1, GroupLayout.PREFERRED_SIZE, 309, GroupLayout.PREFERRED_SIZE)
                            .addComponent(c2Attribute_1, GroupLayout.PREFERRED_SIZE, 309, GroupLayout.PREFERRED_SIZE)
                            .addComponent(c1c2_columns, GroupLayout.PREFERRED_SIZE, 309, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16)
                            .addComponent(jLabel13)
                            .addComponent(jLabel15)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(deAttributeComboBox, GroupLayout.PREFERRED_SIZE, 280, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17, GroupLayout.PREFERRED_SIZE, 127, GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 381, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(de_column_exposure_name, GroupLayout.PREFERRED_SIZE, 357, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel12)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbDecomposedExposure)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(de_column_exposure_name, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                    .addComponent(deAttributeComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jLabel13)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(c1c2_columns, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel14)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(c1Attribute_1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel15)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(c2Attribute_1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab(NbBundle.getMessage(NetExpoPanel.class, "NetExpoPanel.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1, GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(titleBar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleBar, GroupLayout.PREFERRED_SIZE, 41, GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void onCheckAffExpo(ActionEvent evt) {//GEN-FIRST:event_onCheckAffExpo
        // TODO add your handling code here:
        if(!affnetAttributeComboBox.isEnabled()){
            affnetAttributeComboBox.removeAllItems();
            
            //add code here for attribute capture
            for(Column column: attributes){
                if(!column.getTitle().equals("Id") && !column.getTitle().equals("Label") && !column.getTitle().equals("Interval")){
                    affnetAttributeComboBox.addItem(column.getTitle());
                }
                
            }
            
            affnetAttributeComboBox.setEnabled(true);
            this.affexpColumnInput.setEnabled(true);
        }
        else{
            affnetAttributeComboBox.setEnabled(false);
            affexpColumnInput.setEnabled(false);
        }
        
        if(!primaryValueComboBox.isEnabled()){
            
            
            primaryValueComboBox.setEnabled(true);
        }
        else{
            primaryValueComboBox.setEnabled(false);
        }
        
        if(!twoModeComboBox.isEnabled()){
            twoModeComboBox.removeAllItems();
            
            for(Column column: attributes){
                if(!column.getTitle().equals("Id") &&
                        !column.getTitle().equals("Label") &&
                        !column.getTitle().equals("Interval")){
                twoModeComboBox.addItem(column.getTitle()); 
                }
            }
            
            twoModeComboBox.setEnabled(true);
            twoModeComboBox.setSelectedIndex(-1);
        }
        else{
            twoModeComboBox.setEnabled(false);
        }
        
    }//GEN-LAST:event_onCheckAffExpo

    private void networkExposureCheckBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_networkExposureCheckBoxActionPerformed
        // TODO add your handling code here:

        if (!netexpoAttributeComboBox.isEnabled()) {
            netexpoAttributeComboBox.removeAllItems();
           
            for (Column column : attributes) {
                //item.add(column.getTitle());
                if(!column.getTitle().equals("Id") && !column.getTitle().equals("Label") && !column.getTitle().equals("Interval"))
                    netexpoAttributeComboBox.addItem(column.getTitle());
                
                
            }
            netexpoAttributeComboBox.setEnabled(true);
            this.netExpoColumnInput.setEnabled(true);
            
        }
        else{
            netexpoAttributeComboBox.setEnabled(false);
            netExpoColumnInput.setEnabled(false);
        }
        


    }//GEN-LAST:event_networkExposureCheckBoxActionPerformed

    private void twoModeComboBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_twoModeComboBoxItemStateChanged
        // TODO add your handling code here:
        
        //pull the values from the attributes
        //evt.getItem()
        if (evt.getStateChange() == ItemEvent.SELECTED && 
                evt.getItem() != null) {
            //System.out.println(evt.getItem().toString());
            /*Node[] nodes = graph.getNodes().toArray();
            for(Node node: nodes){
                System.out.println("Test: " +node.getAttribute(evt.getItem().toString()));
            }*/
            
        }
    }//GEN-LAST:event_twoModeComboBoxItemStateChanged

    private void twoModeComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_twoModeComboBoxActionPerformed
        // TODO add your handling code here:
        //System.out.println("Fire action");
        if(twoModeComboBox.getSelectedIndex()>-1){
            String selectItem = (String)twoModeComboBox.getSelectedItem();
            if(!selectItem.equals("Id") &&
                    !selectItem.equals("Label") &&
                    !selectItem.equals("Interval")){
                System.out.println("Selected: " + selectItem);
                
                twoModeColumn = selectItem;
                
                Node[] nodes = graph.getNodes().toArray();
                Set<String> choices = new HashSet<String>();
                for(Node node: nodes){
                    System.out.println("Test: " + node.getAttribute(selectItem));
                    choices.add(node.getAttribute(selectItem).toString());
                }
                
                
                
                primaryValueComboBox.removeAllItems();
                for(String choice: choices){
                    primaryValueComboBox.addItem(choice);
                }
                primaryValueComboBox.setSelectedIndex(-1);
            }
            
        }
        

        
    }//GEN-LAST:event_twoModeComboBoxActionPerformed

    private void primaryValueComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_primaryValueComboBoxActionPerformed
        // TODO add your handling code here:
        if(primaryValueComboBox.getSelectedIndex()>-1){
            this.twoModeValue = (String)primaryValueComboBox.getSelectedItem();
            
        }
    }//GEN-LAST:event_primaryValueComboBoxActionPerformed

    private void netexpoAttributeComboBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_netexpoAttributeComboBoxItemStateChanged
        // TODO add your handling code here:
                
        netExpoColumnInput.setText("net_expo_score_" + evt.getItem().toString());
    }//GEN-LAST:event_netexpoAttributeComboBoxItemStateChanged

    private void affnetAttributeComboBoxItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_affnetAttributeComboBoxItemStateChanged
        // TODO add your handling code here:
        
        affexpColumnInput.setText("aff_expo_score_" + evt.getItem().toString());
        
    }//GEN-LAST:event_affnetAttributeComboBoxItemStateChanged

    private void cbDecomposedExposureActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cbDecomposedExposureActionPerformed
        // TODO add your handling code here:
        if(!c1c2_columns.isEnabled()){
            c1c2_columns.removeAllItems();
            deAttributeComboBox.removeAllItems();
            
            for (Column column : edge_attributes) {
                 if(!column.getTitle().equals("Id") && 
                         !column.getTitle().equals("Label") && 
                         !column.getTitle().equals("Interval"))
                    c1c2_columns.addItem(column.getTitle());
            }
            
            for(Column column: attributes){
                 if(!column.getTitle().equals("Id") && 
                         !column.getTitle().equals("Label") && 
                         !column.getTitle().equals("Interval"))
                     deAttributeComboBox.addItem(column.getTitle());
            }
            
            c1c2_columns.setSelectedIndex(-1);
            deAttributeComboBox.setSelectedIndex(-1);
            
            c1c2_columns.setEnabled(true);
            deAttributeComboBox.setEnabled(true);
            
            
            this.de_column_exposure_name.setEnabled(true);
            this.de_column_exposure_name.setText("");
        }
        else{
            c1c2_columns.setEnabled(false);
            c1Attribute_1.setEnabled(false);
            
            c2Attribute_1.setEnabled(false);
            
            deAttributeComboBox.setEnabled(false);
            this.de_column_exposure_name.setEnabled(false);
            this.de_column_exposure_name.setText("");
        }
    }//GEN-LAST:event_cbDecomposedExposureActionPerformed

    private void c1Attribute_1ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_c1Attribute_1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_c1Attribute_1ItemStateChanged

    private void c2Attribute_1ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_c2Attribute_1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_c2Attribute_1ItemStateChanged

    private void c1c2_columnsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_c1c2_columnsActionPerformed
        // TODO add your handling code here:
        
        if((c1c2_columns.getSelectedItem() != null) &&
                c1c2_columns.isEnabled()){
            System.out.println(c1c2_columns.getSelectedItem().toString());
            //check if the selected attribute has four or more values
            if(hasEnoughValues(c1c2_columns.getSelectedItem().toString())){
                //populate the comboboxes
                c1Attribute_1.removeAllItems();
                
                c2Attribute_1.removeAllItems();
                
                
                Set<String>values = this.getC1C2Values(c1c2_columns.getSelectedItem().toString());
                
                for(String v: values){
                    c1Attribute_1.addItem(v);
                    
                    c2Attribute_1.addItem(v);
                    
                }
                
                //enable the c1 c2 comboboxes
                
                c2Attribute_1.setEnabled(true); 
                 
                c1Attribute_1.setEnabled(true); 
            }
            else{
                
                JOptionPane.showMessageDialog(this, "This variable does not four or more values. Please select another.");
                c1c2_columns.setSelectedIndex(-1);
                
                c1Attribute_1.setEnabled(false); c1Attribute_1.removeAllItems();
               
                c2Attribute_1.setEnabled(false); c2Attribute_1.removeAllItems();
                
            }
        }
    }//GEN-LAST:event_c1c2_columnsActionPerformed

    private void deAttributeComboBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deAttributeComboBoxActionPerformed
        // TODO add your handling code here:
        
        if(deAttributeComboBox.getSelectedItem() !=null && 
                this.de_column_exposure_name.isEnabled()){
            de_column_exposure_name.setText("decomp_" + deAttributeComboBox.getSelectedItem().toString());
        }
    }//GEN-LAST:event_deAttributeComboBoxActionPerformed

    private Set<String> getC1C2Values(String column_variable){
        Edge[]edges = graph.getEdges().toArray();

        Set<String> choices = new HashSet<String>();
        for(Edge edge: edges){
            choices.add(edge.getAttribute(column_variable).toString());
            
        }
        
        return choices;
    }
    
    private boolean hasEnoughValues(String column_variable){
        Edge[]edges = graph.getEdges().toArray();
        Set<String> choices = new HashSet<String>();
        for(Edge edge: edges){
            choices.add(edge.getAttribute(column_variable).toString());
            
        }
        
        if(choices.size()>=2){
            return true;
        }
        
        return false;
    }
    
    public String getUserNetExpoColumn(){
        if(netExpoColumnInput.getText().isEmpty()){
            return null;
        }
        else{
            return netExpoColumnInput.getText();
        }
    }
    
    public String getUserAffExpoColumn(){
        if(affexpColumnInput.getText().isEmpty()){
            return null;
        }
        else{
            return affexpColumnInput.getText();
        }
    }
    
    public String getUserDecompExpoColumn(){
        if(de_column_exposure_name.getText().isEmpty()){
            return null;
        }
        else{
            return de_column_exposure_name.getText();
        }
    }
    
    public boolean getUserOffDiagonalValuesChoice(){
        
        if(this.affExposureCheckBox.isSelected()){
            return provideOffDiagonalValues.isSelected();
        }
        else{
            return false;
        }
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    JCheckBox affExposureCheckBox;
    JTextField affexpColumnInput;
    JComboBox<String> affnetAttributeComboBox;
    JComboBox<String> c1Attribute_1;
    JComboBox<String> c1c2_columns;
    JComboBox<String> c2Attribute_1;
    JCheckBox cbDecomposedExposure;
    JComboBox<String> deAttributeComboBox;
    JTextField de_column_exposure_name;
    JLabel jLabel1;
    JLabel jLabel10;
    JLabel jLabel11;
    JLabel jLabel12;
    JLabel jLabel13;
    JLabel jLabel14;
    JLabel jLabel15;
    JLabel jLabel16;
    JLabel jLabel17;
    JLabel jLabel2;
    JLabel jLabel3;
    JLabel jLabel4;
    JLabel jLabel5;
    JLabel jLabel6;
    JLabel jLabel7;
    JLabel jLabel8;
    JLabel jLabel9;
    JPanel jPanel1;
    JPanel jPanel2;
    JPanel jPanel3;
    JSeparator jSeparator1;
    JTabbedPane jTabbedPane1;
    JTextField netExpoColumnInput;
    JComboBox<String> netexpoAttributeComboBox;
    JCheckBox networkExposureCheckBox;
    JLabel networkExposureLabel;
    JComboBox<String> primaryValueComboBox;
    JCheckBox provideOffDiagonalValues;
    JLabel titleBar;
    JComboBox<String> twoModeComboBox;
    // End of variables declaration//GEN-END:variables

    void setGraph(Graph graph) {
        this.graph = graph;
        
        
    }

    
}
